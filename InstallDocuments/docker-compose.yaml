# File Name: docker-compose.yaml
# Created Date: 2025-08-26
# Modified Date: 2025-08-28
# Version: 1.0.9
# Description: Docker Compose configuration for Job Ticket System, orchestrating Django, PostgreSQL, PostgREST, Redis, Celery, and nginx.
# Comments:
# - Uses environment variables from .env file for sensitive data.
# - Ensures services are networked and dependent.
# - Runs django and nginx as local user to avoid permission issues.
# Update Notes:
# - 2025-08-27 (v1.0.6): Updated celery command to direct execution to match Dockerfile --system install.
# - 2025-08-28 (v1.0.7): Removed schema.sql volume mount (handled by Django migrations); updated django healthcheck to /health/ to match new view.
# - 2025-08-28 (v1.0.8): Updated PostgREST PGRST_DB_URI to use ENCODED_PG_PASSWORD to handle special characters in password.
# - 2025-08-28 (v1.0.9): Increased PostgREST healthcheck timeout and retries to handle slow database initialization.

services:
  db:
    image: postgres:17
    environment:
      - POSTGRES_USER=${PG_USER:-jts_pg_admin}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=job_ticket_system
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${PG_USER:-jts_pg_admin}", "-d", "job_ticket_system"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  postgrest:
    image: postgrest/postgrest:latest
    environment:
      - PGRST_DB_URI=postgres://${PG_USER:-jts_pg_admin}:${ENCODED_PG_PASSWORD}@db:5432/job_ticket_system
      - PGRST_DB_SCHEMA=public
      - PGRST_DB_ANON_ROLE=${PG_USER:-jts_pg_admin}
      - PGRST_SERVER_HOST=0.0.0.0
      - PGRST_SERVER_PORT=3000
      - PGRST_JWT_SECRET=${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 5s
      timeout: 10s
      retries: 10

  django:
    build: .
    user: "${LOCAL_UID:-1000}:${LOCAL_GID:-1000}"
    environment:
      - DATABASE_URL=postgres://${PG_USER:-jts_pg_admin}:${PG_PASSWORD}@db:5432/job_ticket_system
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - .:/app
      - static_data:/app/static
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 5s
      timeout: 3s
      retries: 5

  celery:
    build: .
    command: celery -A jts worker -l info
    environment:
      - DATABASE_URL=postgres://${PG_USER:-jts_pg_admin}:${PG_PASSWORD}@db:5432/job_ticket_system
      - CELERY_BROKER_URL=redis://redis:6379/0
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  nginx:
    image: nginx:latest
    user: "${LOCAL_UID:-1000}:${LOCAL_GID:-1000}"
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_data:/static
    depends_on:
      django:
        condition: service_healthy
      postgrest:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  pg_data:
  static_data:
